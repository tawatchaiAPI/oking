const CONFIG = {
  API_BASE_URL: 'datascss/',
  FETCH_DELAY: 1000,
  ENDPOINTS: {
    GET_GROUPS: 'get-groups.php',
    SAVE_ANNOUNCEMENT: 'save-announcement.php',
    GET_ANNOUNCEMENTS: 'get-announcements.php',
    DELETE_ANNOUNCEMENT: 'delete-announcement.php',
    UPDATE_ANNOUNCEMENT: 'edit-announcement.php'
  }
};

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°
async function fetchGroupsForDropdown(selectId) {
  const selectElement = document.getElementById(selectId);
  if (!selectElement) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element select ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID '${selectId}'`);
    return;
  }

  try {
    const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.GET_GROUPS);
    if (!response.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ: ${response.status}`);
    const data = await response.json();

    selectElement.innerHTML = '<option value="">-- Select Group --</option>';
    data.forEach(group => {
      let option = document.createElement("option");
      option.value = group.group_id;
      option.textContent = `${group.group_name} (${group.group_id})`;
      selectElement.appendChild(option);
    });

    console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  } catch (error) {
    console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°:", error);
  }
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
async function saveAnnouncement(group_id, message, topic, announcement_time = null, announcement_date = null) {
  if (!group_id || !topic) {
    console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:", { group_id, message, topic, announcement_time, announcement_date });
    return { status: 'error', message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" };
  }

  const payload = { group_id, message, topic };
  if (announcement_time) payload.announcement_time = announcement_time;
  if (announcement_date) payload.announcement_date = announcement_date;

  const fullUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.SAVE_ANNOUNCEMENT;
  console.log("üì§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ:", payload);
  console.log("üåê URL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:", fullUrl);

  try {
    const response = await fetch(fullUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json; charset=UTF-8' },
      body: JSON.stringify(payload)
    });

    const responseText = await response.text();
    console.log("üì• Response ‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å API:", responseText);

    let responseData;
    try {
      responseData = JSON.parse(responseText);
    } catch (jsonError) {
      throw new Error(`Failed to parse JSON: ${jsonError.message}, Raw response: "${responseText}"`);
    }

    console.log("üì• Response JSON ‡∏à‡∏≤‡∏Å API:", responseData);

    if (!response.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: ${responseData.message || response.status}`);
    return responseData;
  } catch (error) {
    console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
    return { status: 'error', message: error.message };
  }
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function fetchAnnouncements() {
  const fullUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.GET_ANNOUNCEMENTS;
 // console.log("üåê URL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", fullUrl);

  try {
    const response = await fetch(fullUrl);
    if (!response.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ: ${response.status}`);

    const responseText = await response.text();
   // console.log("üì• Response ‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å API:", responseText);

    let data;
    try {
      data = JSON.parse(responseText);
    } catch (jsonError) {
      throw new Error(`Failed to parse JSON: ${jsonError.message}, Raw response: "${responseText}"`);
    }

    if (!Array.isArray(data)) throw new Error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    //console.log("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:", data);
    return data;
  } catch (error) {
    console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:", error);
    return [];
  }
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
async function deleteAnnouncement(announcementId, topic) {
  const fullUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.DELETE_ANNOUNCEMENT;
  console.log("üåê URL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö:", fullUrl);
  console.log("üì§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ:", { announcement_id: announcementId, topic });

  try {
    const response = await fetch(fullUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json; charset=UTF-8' },
      body: JSON.stringify({ announcement_id: announcementId, topic })
    });

    console.log("üì• HTTP Status:", response.status, response.statusText);

    const responseText = await response.text();
    console.log("üì• Response ‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å API:", responseText);

    let responseData;
    if (responseText.trim() === "") {
      if (response.ok) {
        responseData = { status: "success", message: "Deleted successfully (empty response)" };
      } else {
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ: Empty response with status ${response.status}`);
      }
    } else {
      try {
        responseData = JSON.parse(responseText);
      } catch (jsonError) {
        throw new Error(`Failed to parse JSON: ${jsonError.message}, Status: ${response.status}, Raw response: "${responseText}"`);
      }
    }

    console.log("üì• Response JSON ‡∏à‡∏≤‡∏Å API:", responseData);

    if (!response.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ: ${responseData.message || response.status}`);
    return responseData;
  } catch (error) {
    console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:", error);
    return { status: 'error', message: error.message };
  }
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
async function editAnnouncement(id, message, topic, announcement_time = null, announcement_date = null) {
  const payload = { id, message, topic };
  if (announcement_time) payload.announcement_time = announcement_time;
  if (announcement_date) payload.announcement_date = announcement_date;

  const fullUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.UPDATE_ANNOUNCEMENT;
  console.log("üåê URL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:", fullUrl);
  console.log("üì§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ:", payload);

  try {
    const response = await fetch(fullUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json; charset=UTF-8' },
      body: JSON.stringify(payload)
    });

    const responseText = await response.text();
    console.log("üì• Response ‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å API:", responseText);

    let responseData;
    try {
      responseData = JSON.parse(responseText);
    } catch (jsonError) {
      throw new Error(`Failed to parse JSON: ${jsonError.message}, Raw response: "${responseText}"`);
    }

    console.log("üì• Response JSON ‡∏à‡∏≤‡∏Å API:", responseData);

    if (!response.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ: ${responseData.message || response.status}`);
    return responseData;
  } catch (error) {
    console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:", error);
    return { status: 'error', message: error.message };
  }
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
async function updateAnnouncementTable() {
  const tableBodies = {
    auto: document.getElementById("autoMessageTableBody"),
    time: document.getElementById("timeMessageTableBody"),
    day: document.getElementById("dayMessageTableBody")
  };

  let allTablesExist = true;
  for (const [key, tbody] of Object.entries(tableBodies)) {
    if (!tbody) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö tbody ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '${key}MessageTableBody' ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ`);
      allTablesExist = false;
    } else {
      tbody.innerHTML = '<tr><td colspan="5" class="text-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</td></tr>';
    }
  }

  if (!allTablesExist) console.log("‚ÑπÔ∏è ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà");

  const announcements = await fetchAnnouncements();

  for (const tbody of Object.values(tableBodies)) {
    if (tbody) tbody.innerHTML = "";
  }

  if (announcements.length === 0) {
    for (const tbody of Object.values(tableBodies)) {
      if (tbody) tbody.innerHTML = '<tr><td colspan="5" class="text-center">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®</td></tr>';
    }
    console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å API");
    return;
  }

  const createRow = (announcement) => {
    return `
      <tr>
        <td>${announcement.message || '-'}</td>
        <td>${announcement.topic || '-'}</td>
        <td>
          <button class="btn btn-sm btn-primary edit-announcement" 
                  data-id="${announcement.id}" 
                  data-message="${announcement.message || ''}" 
                  data-topic="${announcement.topic || ''}"
                  data-time="${announcement.announcement_time || ''}"
                  data-date="${announcement.announcement_date || ''}">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
          <button class="btn btn-sm btn-danger delete-announcement" 
                  data-id="${announcement.id}" 
                  data-topic="${announcement.topic || ''}">‡∏•‡∏ö</button>
        </td>
      </tr>
    `;
  };

  const autoTopics = [
    'sendOpenOnlyAll',
    'sendCloseDeposit',
    'sendCloseWithdraw',
    'sendCloseOnlyAll',
    'sendCloseRechargeByOne',
    'sendSystemCutOff',
    'sendSystemMaintenance',
    'sendNotificationAnnouncement',
    'sendCutoff',
    'sendOpen',
    'sendOpenD',
    'sendOpenW',
    'sendClose',
    'sendClose_Deposit',
    'sendClose_Withdraw',
    'sendAnnounceDeposit',
    'sendAnnounceWithdraw'
  ];
  const timeTopics = ['sendAnnouncementAlldayAuto'];
  const dayTopics = ['sendAnnouncementTimeAllday'];

  announcements.forEach(announcement => {
    const tr = document.createElement("tr");
    tr.innerHTML = createRow(announcement);

    const topic = announcement.topic || '';
    let targetTbody;

    if (timeTopics.includes(topic)) {
      targetTbody = tableBodies.time;
      console.log(`‚úÖ ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• topic '${topic}' ‡πÑ‡∏õ‡∏ó‡∏µ‡πà timeMessageTableBody`);
    } else if (autoTopics.includes(topic)) {
      targetTbody = tableBodies.auto;
      console.log(`‚úÖ ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• topic '${topic}' ‡πÑ‡∏õ‡∏ó‡∏µ‡πà autoMessageTableBody`);
    } else if (dayTopics.includes(topic)) {
      targetTbody = tableBodies.day;
      console.log(`‚úÖ ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• topic '${topic}' ‡πÑ‡∏õ‡∏ó‡∏µ‡πà dayMessageTableBody`);
    } else {
      console.warn(`‚ö†Ô∏è Topic '${topic}' ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î ‡πÜ`);
    }

    if (targetTbody) {
      targetTbody.appendChild(tr);
    }
  });

  for (const [key, tbody] of Object.entries(tableBodies)) {
    if (tbody && tbody.children.length === 0) {
      tbody.innerHTML = `<tr><td colspan="5" class="text-center">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${key}</td></tr>`;
      console.log(`‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô ${key}MessageTableBody`);
    }
  }

  console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
}

// üìå ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á
function setupTableEventListeners() {
  const tableBodyIds = ["autoMessageTableBody", "timeMessageTableBody", "dayMessageTableBody"];
  
  tableBodyIds.forEach(id => {
    const tableBody = document.getElementById(id);
    if (!tableBody) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á '${id}' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö event listeners ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ`);
      return;
    }

    tableBody.addEventListener("click", async (event) => {
      if (event.target.classList.contains("edit-announcement")) {
        const announcementId = event.target.getAttribute("data-id");
        const currentMessage = event.target.getAttribute("data-message");
        const currentTopic = event.target.getAttribute("data-topic");
        const currentTime = event.target.getAttribute("data-time");
        const currentDate = event.target.getAttribute("data-date");

        const elements = {
          editIdEl: document.getElementById("editAnnouncementId"),
          editSourceTableEl: document.getElementById("editSourceTable"),
          editMessageEl: document.getElementById("editMessage"),
          editTopicEl: document.getElementById("editTopic"),
          editTimeEl: document.getElementById("editAnnouncementTime"),
          editDateEl: document.getElementById("editAnnouncementDate"),
          modalEl: document.getElementById("editAnnouncementModal")
        };

        for (const [key, el] of Object.entries(elements)) {
          if (!el) {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element '${key}' (ID: ${key.replace('El', '')}) ‡πÉ‡∏ô modal`);
            return;
          }
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        elements.editIdEl.value = announcementId;
        elements.editSourceTableEl.value = id; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å <tbody> ‡πÑ‡∏´‡∏ô
        elements.editMessageEl.value = currentMessage;
        elements.editTopicEl.value = currentTopic;
        elements.editTimeEl.value = currentTime || '';
        elements.editDateEl.value = currentDate || '';

        // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏≤‡∏° <tbody>
        const timeField = document.getElementById("timeField");
        const dateField = document.getElementById("dateField");
        if (id === "autoMessageTableBody") {
          timeField.style.display = "none";
          dateField.style.display = "none";
        } else if (id === "timeMessageTableBody") {
          timeField.style.display = "block";
          dateField.style.display = "none";
        } else if (id === "dayMessageTableBody") {
          timeField.style.display = "block";
          dateField.style.display = "block";
        }

        const modal = new bootstrap.Modal(elements.modalEl);
        modal.show();
      }

      if (event.target.classList.contains("delete-announcement")) {
        const announcementId = event.target.getAttribute("data-id");
        const topic = event.target.getAttribute("data-topic");
        if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
          const response = await deleteAnnouncement(announcementId, topic);
          if (response.status === "success") {
            alert("‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            updateAnnouncementTable();
          } else {
            alert(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ: ${response.message}`);
          }
        }
      }
    });
  });

  const saveButton = document.getElementById("saveEditAnnouncement");
  if (saveButton) {
    saveButton.addEventListener("click", async () => {
      const elements = {
        announcementId: document.getElementById("editAnnouncementId"),
        sourceTable: document.getElementById("editSourceTable"),
        message: document.getElementById("editMessage"),
        topic: document.getElementById("editTopic"),
        announcementTime: document.getElementById("editAnnouncementTime"),
        announcementDate: document.getElementById("editAnnouncementDate")
      };

      for (const [key, el] of Object.entries(elements)) {
        if (!el) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element '${key}' (ID: edit${key}) ‡πÉ‡∏ô modal`);
          return;
        }
      }

      const announcementId = elements.announcementId.value;
      const sourceTable = elements.sourceTable.value;
      const message = elements.message.value.trim();
      const topic = elements.topic.value;
      const announcementTime = sourceTable !== "autoMessageTableBody" ? elements.announcementTime.value || null : null;
      const announcementDate = sourceTable === "dayMessageTableBody" ? elements.announcementDate.value || null : null;

      if (!announcementId || !message || !topic) {
        alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
        return;
      }

      const response = await editAnnouncement(announcementId, message, topic, announcementTime, announcementDate);
      if (response.status === "success") {
        alert("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        updateAnnouncementTable();
        bootstrap.Modal.getInstance(document.getElementById("editAnnouncementModal")).hide();
      } else {
        alert(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ: ${response.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
      }
    });
  } else {
    console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° saveEditAnnouncement");
  }
}

// üìå ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
document.addEventListener("DOMContentLoaded", () => {
  fetchGroupsForDropdown("groupId");
  updateAnnouncementTable();
  setupTableEventListeners();

  const form = document.getElementById('announcementForm');
  const feedback = document.getElementById('formFeedback');
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const groupId = document.getElementById('groupId').value;
      const message = document.getElementById('message').value.trim();
      const topic = document.getElementById('topic').value;

      if (!groupId || !topic) {
        if (feedback) feedback.innerHTML = '<div class="alert alert-danger">‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</div>';
        return;
      }

      const response = await saveAnnouncement(groupId, message, topic);
      if (response.status === 'success') {
        if (feedback) feedback.innerHTML = '<div class="alert alert-success">‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</div>';
        form.reset();
        updateAnnouncementTable();
        setTimeout(() => { if (feedback) feedback.innerHTML = ''; }, 3000);
      } else {
        if (feedback) feedback.innerHTML = `<div class="alert alert-danger">‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: ${response.message}</div>`;
      }
    });
  }

  const formTime = document.getElementById('announcementFormTime');
  const feedbackTime = document.getElementById('formFeedbackTime');
  if (formTime) {
    formTime.addEventListener('submit', async (e) => {
      e.preventDefault();

      const groupId = document.getElementById('groupId').value;
      const message = document.getElementById('message').value.trim();
      const topic = document.getElementById('topic').value;
      const announcementTime = document.getElementById('announcementTime').value;

      if (!groupId || !topic || !announcementTime) {
        if (feedbackTime) feedbackTime.innerHTML = '<div class="alert alert-danger">‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</div>';
        return;
      }

      const response = await saveAnnouncement(groupId, message, topic, announcementTime);
      if (response.status === 'success') {
        if (feedbackTime) feedbackTime.innerHTML = '<div class="alert alert-success">‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</div>';
        formTime.reset();
        updateAnnouncementTable();
        setTimeout(() => { if (feedbackTime) feedbackTime.innerHTML = ''; }, 3000);
      } else {
        if (feedbackTime) feedbackTime.innerHTML = `<div class="alert alert-danger">‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: ${response.message}</div>`;
      }
    });
  }

  const formTimeAllDay = document.getElementById('announcementFormTimeallDay');
  const feedbackTimeAllDay = document.getElementById('formFeedbackTimeAllDay');
  if (formTimeAllDay) {
    formTimeAllDay.addEventListener('submit', async (e) => {
      e.preventDefault();

      const groupId = document.getElementById('groupId').value;
      const message = document.getElementById('message').value.trim();
      const topic = document.getElementById('topic').value;
      const announcementTime = document.getElementById('announcementTime').value;
      const announcementDate = document.getElementById('announcementDate').value;

      if (!groupId || !topic || !announcementTime || !announcementDate) {
        if (feedbackTimeAllDay) feedbackTimeAllDay.innerHTML = '<div class="alert alert-danger">‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</div>';
        return;
      }

      const response = await saveAnnouncement(groupId, message, topic, announcementTime, announcementDate);
      if (response.status === 'success') {
        if (feedbackTimeAllDay) feedbackTimeAllDay.innerHTML = '<div class="alert alert-success">‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</div>';
        formTimeAllDay.reset();
        updateAnnouncementTable();
        setTimeout(() => { if (feedbackTimeAllDay) feedbackTimeAllDay.innerHTML = ''; }, 3000);
      } else {
        if (feedbackTimeAllDay) feedbackTimeAllDay.innerHTML = `<div class="alert alert-danger">‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: ${response.message}</div>`;
      }
    });
  }
});