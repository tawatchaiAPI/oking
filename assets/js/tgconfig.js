const CONFIG = {
    API_BASE_URL: 'datascss/', // URL ‡∏Ç‡∏≠‡∏á API
    FETCH_DELAY: 1000, // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    ENDPOINTS: {
      GET_BOTS: 'get-token.php',
      DELETE_BOT: 'delete-token.php',
      ADD_BOT: 'add-token.php',
      EDIT_BOT: 'edit_token.php',
    }
  };
  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó
  export async function fetchBots() {
    try {
      const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.GET_BOTS);
      if (!response.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: ${response.status}`);
      const data = await response.json();
      return data;
    } catch (error) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó:", error);
      return [];
    }
  }
  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó
  export async function addBot(botName, token) {
    if (!botName || !token) {
      return { status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' };
    }
  
    try {
      const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.ADD_BOT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json; charset=UTF-8' },
        body: JSON.stringify({ bot_name: botName, token: token })
      });
  
      if (!response.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: ${response.status}`);
      const result = await response.json();
      console.log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result);
      return result;
    } catch (error) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó:", error);
      return { status: 'error', message: error.message };
    }
  }
  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ö‡∏≠‡∏ó
  export async function deleteBot(botId) {
    if (!botId) {
      console.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return { status: 'error', message: '‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
    }
  
    try {
      const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.DELETE_BOT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json; charset=UTF-8' },
        body: JSON.stringify({ bot_id: botId })
      });
  
      const textResponse = await response.text();
      console.log("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å delete-token.php:", textResponse); // Debug response ‡∏î‡∏¥‡∏ö
  
      if (!response.ok) {
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: ${response.status} ${response.statusText}`);
      }
  
      let result;
      try {
        result = JSON.parse(textResponse);
        console.log("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß:", result); // Debug ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON
      } catch (jsonError) {
        console.error("‚ùå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON:", textResponse);
        return { status: 'error', message: `‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${textResponse}` };
      }
  
      return result;
    } catch (error) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏≠‡∏ó:", error);
      return { status: 'error', message: error.message };
    }
  }
  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≠‡∏ó
  export async function editBot(id, botName, token) {
    if (!id || !botName || !token) {
      return { status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' };
    }
  
    try {
      const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.EDIT_BOT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json; charset=UTF-8' },
        body: JSON.stringify({ id, bot_name: botName, token: token })
      });
  
      if (!response.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: ${response.status}`);
      const result = await response.json();
      console.log("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result);
      return result;
    } catch (error) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≠‡∏ó:", error);
      return { status: 'error', message: error.message };
    }
  }
  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  function updateTable(data, tableId) {
    const tableBody = document.getElementById(tableId);
    if (!tableBody) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ ID '${tableId}'`);
      return;
    }
  
    tableBody.innerHTML = '<tr><td colspan="4" class="text-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</td></tr>';
    setTimeout(() => {
      tableBody.innerHTML = "";
      if (!data || data.length === 0 || data.status === 'error') {
        tableBody.innerHTML = '<tr><td colspan="4" class="text-center">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó</td></tr>';
        return;
      }
  
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ data.data (‡∏à‡∏≤‡∏Å get-token.php ‡∏ó‡∏µ‡πà‡∏°‡∏µ "data" field)
      const bots = data.data || data;
      bots.forEach(row => {
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${row.id}</td>
          <td>${row.bot_name}</td>
          <td>${row.token}</td>
          <td>
            <button class="btn btn-sm btn-danger delete" data-id="${row.id}">‡∏•‡∏ö</button>
            <button class="btn btn-sm btn-primary edit" data-id="${row.id}" data-name="${row.bot_name}" data-token="${row.token}">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
          </td>
        `;
        tableBody.appendChild(tr);
      });
    }, CONFIG.FETCH_DELAY);
  }
  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  function setupTableEventListeners(tableId) {
    const tableBody = document.getElementById(tableId);
    if (!tableBody) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ ID '${tableId}'`);
      return;
    }
  
    tableBody.addEventListener("click", async (event) => {
      console.log("‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà:", event.target.className); // Debug ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
  
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏•‡∏ö"
      if (event.target.classList.contains("delete")) {
        const botId = event.target.getAttribute("data-id");
        console.log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏ö‡∏≠‡∏ó ID:", botId); // Debug
  
        if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
          const response = await deleteBot(botId);
          console.log("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏ö:", response); // Debug ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  
          if (response && response.status === 'success') {
            alert("‚úÖ ‡∏•‡∏ö‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            fetchBotsForTable(tableId);
          } else {
            const errorMessage = response && response.message ? response.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏';
            alert(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: ${errorMessage}`);
          }
        } else {
          console.log("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
        }
      }
  
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
      if (event.target.classList.contains("edit")) {
        const botId = event.target.getAttribute("data-id");
        const currentName = event.target.getAttribute("data-name");
        const currentToken = event.target.getAttribute("data-token");
  
        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô modal
        document.getElementById("editBotId").value = botId;
        document.getElementById("editBotName").value = currentName;
        document.getElementById("editBotToken").value = currentToken;
  
        // ‡πÅ‡∏™‡∏î‡∏á modal
        const modal = new bootstrap.Modal(document.getElementById("editBotModal"));
        modal.show();
      }
    });
  
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å modal
    const saveButton = document.getElementById("saveEditBot");
    if (saveButton) {
      saveButton.addEventListener("click", async () => {
        const botId = document.getElementById("editBotId").value;
        const botName = document.getElementById("editBotName").value.trim();
        const token = document.getElementById("editBotToken").value.trim();
  
        if (!botName || !token) {
          alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
          return;
        }
  
        const response = await editBot(botId, botName, token);
        if (response.status === 'success') {
          alert("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
          fetchBotsForTable(tableId);
          bootstrap.Modal.getInstance(document.getElementById("editBotModal")).hide();
        } else {
          alert(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: ${response.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`);
        }
      });
    }
  }
  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  async function fetchBotsForTable(tableId) {
    try {
      const data = await fetchBots();
      updateTable(data, tableId);
    } catch (error) {
      console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${tableId}:`, error);
    }
  }
  
  // üìå ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  document.addEventListener("DOMContentLoaded", () => {
    const tableId = "botTableBody";
    fetchBotsForTable(tableId);
    setupTableEventListeners(tableId);
  
    const form = document.getElementById('addBotForm');
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
  
        const botName = document.getElementById('botName').value.trim();
        const token = document.getElementById('botToken').value.trim();
  
        if (!botName || !token) {
          alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
          return;
        }
  
        const response = await addBot(botName, token);
        if (response.status === 'success') {
          alert('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
          form.reset();
          fetchBotsForTable(tableId);
        } else {
          alert(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: ${response.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`);
        }
      });
    } else {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 'addBotForm'");
    }
  });
  
  export default CONFIG;